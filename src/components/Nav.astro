---
import Icon from './Icon.astro';
import ThemeToggle from './ThemeToggle.astro';
import type { iconPaths } from './IconPaths';

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
	{ label: 'Home', href: '/' },
	{ label: 'Projects', href: '/work/' },
	{ label: 'About', href: '/about/' },
];

/** Icon links to social media â€” edit these with links to your profiles! */
const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths }[] = [
	{ label: 'GitHub', href: 'https://github.com/tom-gora/', icon: 'github-logo' },
  { label: 'linkedin', href: 'https://linkedin.com/in/tomasz-gora-6075b71ba', icon: 'linkedin-logo' },
  { label: 'CV', href: 'https://tomgora.online/assets/CV_Tom_Gora.pdf', icon: 'document-file' },
];
---

<nav>
	<div class="menu-header">
    <div class="theme-toggle">
      <ThemeToggle />
    </div>
		<a href="/" class="site-title">
			Tom Gora
		</a>
		<menu-button>
			<template>
				<button class="menu-button" aria-expanded="false">
					<span class="sr-only">Menu</span>
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" width="70%" height="100%">
              <g id="menu-svg-lines">
                <path d="M5 7H19" stroke="var(--accent-regular)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                <path d="M5 12L19 12" stroke="var(--accent-regular)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                <path d="M5 17L19 17" stroke="var(--accent-regular)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
              </g>
            </svg>
				</button>
			</template>
		</menu-button>
	</div>
	<noscript>
		<ul class="nav-items">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a
							aria-current={Astro.url.pathname === href}
							class:list={[
								'link',
								{
									active:
										Astro.url.pathname === href ||
										(href !== '/' && Astro.url.pathname.startsWith(href)),
								},
							]}
							href={href}
						>
							{label}
						</a>
					</li>
				))
			}
		</ul>
	</noscript>
	<noscript>
		<div class="menu-footer">
			<div class="socials">
				{
					iconLinks.map(({ href, icon, label }) => (
						<a href={href} class="social">
							<span class="sr-only">{label}</span>
							<Icon icon={icon} />
						</a>
					))
				}
			</div>
		</div>
	</noscript>
	<div id="menu-content" hidden>
		<ul class="nav-items">
			{
				textLinks.map(({ label, href }) => (
					<li>
						<a
							aria-current={Astro.url.pathname === href}
							class:list={[
								'link',
								{
									active:
										Astro.url.pathname === href ||
										(href !== '/' && Astro.url.pathname.startsWith(href)),
								},
							]}
							href={href}
						>
							{label}
						</a>
					</li>
				))
			}
		</ul>
		<div class="menu-footer">
			<div class="socials">
				{
					iconLinks.map(({ href, icon, label }) => (
						<a href={href} class="social">
							<span class="sr-only">{label}</span>
							<Icon icon={icon} />
						</a>
					))
				}
			</div>

		</div>
	</div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(this.querySelector('template')!.content.cloneNode(true));
			const btn = this.querySelector('button')!;
      // const socials = document.querySelectorAll(".menu-footer a.social");
      // const isDark = document.documentElement.classList.contains('theme-dark');


			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById('menu-content')!;
			menu.hidden = true;
			// Add "menu-content" class in JS to avoid covering content in non-JS browsers.
			menu.classList.add('menu-content');

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
        // isDark && !expand ? socials.forEach(el => el.style.color = "var(--accent-regular)") : null;
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener('click', () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia('(min-width: 50em)');
			handleViewports(mediaQueries);
			mediaQueries.addEventListener('change', handleViewports);
		}
	}
	customElements.define('menu-button', MenuButton);
</script>

<style>
	nav {
		z-index: 9997;
		position: relative;
		font-family: var(--font-brand);
		font-weight: 500;
		margin-bottom: 3.5rem;
	}

	.menu-header {
		display: flex;
		justify-content: space-between;
		gap: 0.5rem;
		padding: 1.5rem;
	}

	.site-title {
    font-size: var(--text-xl) !important;
		display: flex;
		gap: 0.5rem;
		align-items: center;
		line-height: 1.1;
		color: var(--gray-999);
		text-decoration: none;
	}

	.menu-button {
    z-index: 9998;
		position: fixed;
    bottom: 1.5rem;
    right: 1.5rem;
    aspect-ratio: 1;
    width: 3rem;
    display: grid;
    place-items: center;
		border-radius: 999rem;
		background: var(--gray-50);
    border: 3px solid var(--gray-50);
	}

  .menu-button svg {
    position:absolute;
    inset:0;
    width:100%;
    height:100%;
    scale: 0.8;
    margin: 0;
    padding: 0;
    z-index: 9999;
  }

  #menu-svg-lines>* {
    transition: all 0.33s ease-in-out;
  
  }

  .menu-button[aria-expanded='true'] #menu-svg-lines path:first-of-type {
    transform: rotate(-45deg);
    transform-origin: top right;
    transform-box: fill-box;
  }

  .menu-button[aria-expanded='true'] #menu-svg-lines path:nth-of-type(2) {
    transform-origin: center;
    scale: 0 1;
  }
  .menu-button[aria-expanded='true'] #menu-svg-lines path:last-of-type {
    transform: rotate(45deg);
    transform-origin: bottom right;
    transform-box: fill-box;
  }
  .menu-button[aria-expanded='true'] #menu-svg-lines {
    transform: translateX(-2px);
  }


	.menu-button[hidden] {
		display: none;
	}


	.menu-content {
		position: fixed;
    width: 100vw;
    bottom: 0;
		right: 0;
	}

	.nav-items {
		margin: 0;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		font-size: var(--text-md);
		line-height: 1.2;
		list-style: none;
		padding: 2rem;
    background-color: var(--gray-999);
    border-radius: 0.75rem 0.75rem 0 0;
	}

	.link {
		display: inline-block;
		color: var(--gray-300);
		text-decoration: none;
	}

	.link.active {
		color: var(--gray-0);
	}

	.menu-footer {
		--icon-size: var(--text-2xl);
		--icon-padding: 0.5rem;

		display: flex;
		justify-content: space-between;
		gap: 0.75rem;
		padding: 1.5rem 2rem 1.5rem 1.5rem;
		background-color: var(--gray-999);
	}

  .menu-footer::after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: 0.75rem 0.75rem 0 0;
    background-color: var(--gray-0);
    opacity: 0.25;
    transform:translateY(-0.5rem);
    z-index: -1;
    filter: blur(0.5rem);
  }

  :global(.theme-dark) .menu-footer::after {
    background-color: var(--gray-800);
  }

	.socials {
		display: flex;
		flex-wrap: wrap;
		gap: 0.625rem;
		font-size: var(--icon-size);
	}

	.social {
		display: flex;
		padding: var(--icon-padding);
		text-decoration: none;
		color: var(--accent-regular);
		transition: color var(--theme-transition);
	}

  :global(.theme-dark) .social {
		color: var(--accent-regular);
	}

	.social:hover,
	.social:focus {
		color: var(--accent-text-over);
	}

	.theme-toggle {
		display: flex;
		align-items: center;
		height: calc(var(--icon-size) + 2 * var(--icon-padding));
	}

	@media (min-width: 50em) {
		nav {
			display: grid;
			grid-template-columns: 1fr auto 1fr;
			align-items: center;
			padding: 2.5rem 5rem;
			gap: 1rem;
		}

		.menu-header {
			padding: 0;
      justify-content: flex-start;
      gap: 2rem;
		}

		.site-title {
			font-size: var(--text-lg);
		}

		.menu-content {
			display: contents;
		}
    .menu-footer::after {
      display: none;
    }

		.nav-items {
			position: relative;
			flex-direction: row;
			font-size: var(--text-sm);
			border-radius: 999rem;
			padding: 0.5rem 0.5625rem;
			background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
		}

		.nav-items::before {
			position: absolute;
			inset: -1px;
			content: '';
			background: var(--gradient-stroke);
			border-radius: 999rem;
			z-index: -1;
		}

    :global(.theme-dark) .social {
      color: var(--gray-999);
    }

		.link {
			padding: 0.5rem 1rem;
			border-radius: 999rem;
			transition:
				color var(--theme-transition),
				background-color var(--theme-transition);
		}

		.link:hover,
		.link:focus {
			color: var(--gray-100);
			background-color: var(--accent-subtle-overlay);
		}

		.link.active {
			color: var(--accent-text-over);
			background-color: var(--accent-regular);
		}

		.menu-footer {
			--icon-padding: 0.375rem;

			justify-self: flex-end;
			align-items: center;
			padding: 0;
			background-color: transparent;
			box-shadow: none;
		}

	}

	@media (min-width: 60em) {
		.socials {
			display: flex;
			justify-content: flex-end;
			gap: 0;
		}
	}
	@media (forced-colors: active) {
		.link.active {
			color: SelectedItem;
		}
	}
</style>
